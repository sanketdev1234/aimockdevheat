<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Neural Interview Coach | AI-Powered Mock Interviews</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #00f0ff;
      --secondary: #7b2dff;
      --dark: #0a0e17;
    }
    
    body {
      background-color: var(--dark);
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(123, 45, 255, 0.15) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(0, 240, 255, 0.15) 0%, transparent 20%);
      color: #e2e8f0;
      font-family: 'Inter', sans-serif;
    }
    
    .neural-card {
      background: rgba(15, 23, 42, 0.7);
      backdrop-filter: blur(12px);
      border: 1px solid rgba(255, 255, 255, 0.05);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      border-radius: 16px;
      transition: all 0.3s ease;
    }
    
    .neural-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 12px 40px rgba(0, 240, 255, 0.2);
    }
    
    .gradient-text {
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }
    
    .pulse-ring {
      animation: pulse 3s infinite;
    }
    
    @keyframes pulse {
      0% { transform: scale(0.95); opacity: 0.7; }
      50% { transform: scale(1.05); opacity: 1; }
      100% { transform: scale(0.95); opacity: 0.7; }
    }
    
    .floating {
      animation: floating 6s ease-in-out infinite;
    }
    
    @keyframes floating {
      0% { transform: translateY(0px); }
      50% { transform: translateY(-15px); }
      100% { transform: translateY(0px); }
    }
    
    .neural-path {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      pointer-events: none;
      overflow: hidden;
      z-index: -1;
    }
    
    .neural-path::before {
      content: '';
      position: absolute;
      width: 300%;
      height: 300%;
      top: -100%;
      left: -100%;
      background-image: 
        linear-gradient(to right, rgba(123, 45, 255, 0.1) 1px, transparent 1px),
        linear-gradient(to bottom, rgba(123, 45, 255, 0.1) 1px, transparent 1px);
      background-size: 40px 40px;
      animation: moveGrid 60s linear infinite;
    }
    
    @keyframes moveGrid {
      0% { transform: translate(0, 0); }
      100% { transform: translate(40px, 40px); }
    }
    
    .ai-response {
      border-left: 3px solid var(--primary);
      animation: fadeInLeft 0.8s ease-out;
    }
    
    .typewriter {
      overflow: hidden;
      border-right: 2px solid var(--primary);
      white-space: pre-wrap;
      animation: 
        typing 3.5s steps(40, end),
        blink-caret 0.75s step-end infinite;
    }
    
    @keyframes typing {
      from { width: 0 }
      to { width: 100% }
    }
    
    @keyframes blink-caret {
      from, to { border-color: transparent }
      50% { border-color: var(--primary); }
    }
    
    .glow-button {
      position: relative;
      overflow: hidden;
    }
    
    .glow-button::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(
        to bottom right,
        rgba(0, 240, 255, 0.3),
        rgba(123, 45, 255, 0.3),
        transparent
      );
      transform: rotate(30deg);
      animation: shine 3s infinite;
    }
    
    @keyframes shine {
      0% { transform: translateX(-100%) rotate(30deg); }
      100% { transform: translateX(100%) rotate(30deg); }
    }
  </style>
</head>
<body class="min-h-screen overflow-x-hidden">
  <div class="neural-path"></div>
  
  <%- include('partials/navbar', {activePage: 'interview'}) %>

  <div class="container mx-auto px-4 py-12 relative z-10">
    <div class="max-w-4xl mx-auto">
      <!-- Header with animated elements -->
      <div class="text-center mb-16 animate__animated animate__fadeIn">
        <div class="inline-flex items-center justify-center relative mb-6">
          <div class="absolute w-32 h-32 rounded-full bg-gradient-to-r from-blue-500/20 to-purple-600/20 pulse-ring"></div>
          <div class="w-24 h-24 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center shadow-lg">
            <i class="fas fa-brain text-4xl text-white"></i>
          </div>
        </div>
        <h1 class="text-5xl font-bold mb-4 gradient-text">Neural Interview Coach</h1>
        <p class="text-xl text-gray-400 max-w-2xl mx-auto">Your AI-powered interview preparation assistant with neural network intelligence</p>
      </div>

      <!-- Main Interview Card -->
      <div class="neural-card p-8 mb-12 animate__animated animate__fadeInUp">
        <div class="flex items-center mb-8">
          <div class="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center mr-4">
            <i class="fas fa-user-astronaut text-xl text-white"></i>
          </div>
          <h2 class="text-2xl font-bold gradient-text">Interview Configuration</h2>
        </div>

        <form action="/interview" method="POST" class="space-y-8">
          <div>
            <label class="block text-sm font-medium text-gray-400 mb-2">SELECT INTERVIEW MODE</label>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <label class="relative">
                <input type="radio" name="interviewType" value="technical" class="hidden peer" checked>
                <div class="neural-card p-4 text-center cursor-pointer peer-checked:border-blue-500 peer-checked:ring-2 peer-checked:ring-blue-500/50 transition-all">
                  <i class="fas fa-code text-2xl mb-2 text-blue-400"></i>
                  <h3 class="font-medium">Technical</h3>
                </div>
              </label>
              <label class="relative">
                <input type="radio" name="interviewType" value="behavioral" class="hidden peer">
                <div class="neural-card p-4 text-center cursor-pointer peer-checked:border-purple-500 peer-checked:ring-2 peer-checked:ring-purple-500/50 transition-all">
                  <i class="fas fa-comments text-2xl mb-2 text-purple-400"></i>
                  <h3 class="font-medium">Behavioral</h3>
                </div>
              </label>
              <label class="relative">
                <input type="radio" name="interviewType" value="system-design" class="hidden peer">
                <div class="neural-card p-4 text-center cursor-pointer peer-checked:border-teal-500 peer-checked:ring-2 peer-checked:ring-teal-500/50 transition-all">
                  <i class="fas fa-project-diagram text-2xl mb-2 text-teal-400"></i>
                  <h3 class="font-medium">System Design</h3>
                </div>
              </label>
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-400 mb-2">YOUR QUESTION / TOPIC</label>
            <textarea name="prompt" rows="4" 
              class="w-full bg-gray-900/50 border border-gray-800 rounded-xl p-4 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
              placeholder="Ask about React hooks, system architecture, or any tech topic..."></textarea>
          </div>

          <button type="submit" 
            class="w-full py-4 px-6 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl font-bold text-white relative overflow-hidden glow-button transition-all duration-300 hover:shadow-lg hover:shadow-blue-500/20">
            <span class="relative z-10">
              <i class="fas fa-robot mr-2"></i> GENERATE NEURAL RESPONSE
            </span>
          </button>
        </form>
      </div>

      <% if (response) { %>
        <!-- AI Response Section -->
        <div class="neural-card p-8 mb-12 ai-response">
          <div class="flex items-center mb-6">
            <div class="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center mr-4">
              <i class="fas fa-robot text-xl text-white"></i>
            </div>
            <h2 class="text-2xl font-bold gradient-text">Neural Network Response</h2>
          </div>
          
          <div class="prose prose-invert max-w-none text-gray-300 typewriter">
            <%- response.replace(/\n/g, '<br>') %>
          </div>
          
          <div class="mt-8 flex justify-end">
            <button class="flex items-center text-sm text-gray-400 hover:text-blue-400 transition-colors">
              <i class="fas fa-save mr-2"></i> Save to History
            </button>
          </div>
        </div>
      <% } %>

      <% if (error) { %>
        <!-- Error Message -->
        <div class="neural-card p-6 border-l-4 border-red-500 bg-red-900/20 animate__animated animate__shakeX">
          <div class="flex items-start">
            <i class="fas fa-exclamation-triangle text-red-400 mt-1 mr-3"></i>
            <div>
              <h3 class="font-bold text-red-400 mb-1">Neural Network Error</h3>
              <p class="text-gray-300"><%- error %></p>
            </div>
          </div>
        </div>
      <% } %>

      <!-- Floating AI Elements -->
      <div class="absolute -right-20 top-1/4 opacity-20 floating">
        <i class="fas fa-atom text-8xl text-blue-400"></i>
      </div>
      <div class="absolute -left-20 bottom-1/4 opacity-20 floating" style="animation-delay: 2s;">
        <i class="fas fa-network-wired text-8xl text-purple-400"></i>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>

  <script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const prompt = urlParams.get('prompt');
    const interviewType = urlParams.get('interviewType');

    // Pre-fill form if parameters exist
    if (prompt) {
      document.querySelector('textarea[name="prompt"]').value = decodeURIComponent(prompt);
    }
    
    if (interviewType) {
      document.querySelectorAll('input[name="interviewType"]').forEach(radio => {
        if (radio.value === interviewType) {
          radio.checked = true;
        }
      });
    }

    // Form submission loader
    document.querySelector('form')?.addEventListener('submit', function(e) {
      const button = this.querySelector('button[type="submit"]');
      if (button) {
        button.innerHTML = '<i class="fas fa-circle-notch fa-spin mr-2"></i> PROCESSING...';
        button.classList.add('cursor-not-allowed', 'opacity-75');
      }
    });
  });

      // Typewriter effect for responses
      if (typeof response !== 'undefined' && response) {
        const typewriter = document.querySelector('.typewriter');
        if (typewriter) {
          setTimeout(() => {
            typewriter.style.animation = 'none';
            setTimeout(() => typewriter.style.animation = '', 10);
          }, 100);
        }
      }
    };

    // Form submission handler
    const setupFormSubmission = () => {
      const form = document.querySelector('form');
      if (form) {
        form.addEventListener('submit', function(e) {
          const button = this.querySelector('button[type="submit"]');
          if (button) {
            button.innerHTML = '<i class="fas fa-circle-notch fa-spin mr-2"></i> PROCESSING NEURAL RESPONSE...';
            button.classList.add('cursor-not-allowed', 'opacity-75');
          }
          
          const card = this.closest('.neural-card');
          if (card) {
            card.classList.add('animate__animated', 'animate__pulse', 'animate__infinite');
          }
        });
      }
    };

    // Toast notification function
    const showToast = (message) => {
      const toast = document.getElementById('toast');
      const toastMessage = document.getElementById('toast-message');
      
      if (toast && toastMessage) {
        toastMessage.textContent = message;
        toast.classList.remove('hidden');
        toast.classList.add('show');
        
        setTimeout(() => {
          toast.classList.remove('show');
          setTimeout(() => toast.classList.add('hidden'), 300);
        }, 3000);
      }
    };

    // Initialize everything
    initializeInterviewPage();
    setupFormSubmission();
  });
</script>

</body>
</html>